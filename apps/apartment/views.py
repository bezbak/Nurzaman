from django.shortcuts import render,redirect
from django.core.mail import send_mail
from apps.contacts.models import Contact,Messages,View
from apps.base.models import Settings,ContactInfo
from apps.apartment import models
from apps.telegram_bot.views import get_text
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.http import JsonResponse
from apps.apartment.forms import ApartmentSearchForm

# Create your views here.
def catalog(request):
#base
    settings = Settings.objects.latest("id")
    apartments = models.Apartment.objects.all()
    #–°–∞–º–∞—è –Ω–∏–∑–∫–∞—è —Ü–µ–Ω–∞
    cheapest_apartment_price = models.Apartment.objects.order_by('price').first().price
#–ü–∞–≥–∏–Ω–∞—Ü–∏—è
    most_expensive_apartment_price = models.Apartment.objects.order_by('-price').first().price
    smallest_apartment = int(models.Apartment.objects.order_by('razmer').first().razmer)
    largest_apartment = int(models.Apartment.objects.order_by('-razmer').first().razmer)


# —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–≤–∞—Ä—Ç–∏—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = models.Category.objects.all()
    category_id = request.GET.get('category')

    if category_id:
        apartments = apartments.filter(category__id=category_id)

# —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–≤–∞—Ä—Ç–∏—Ä –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º
    rooms = models.Rooms.objects.all()
    room_id = request.GET.get("room")

    if room_id:
        apartments = apartments.filter(room__number=room_id)  

    features = models.Osob.objects.all()
    feature_id = request.GET.get('Ben')  # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞

    if feature_id and feature_id != "0":
        apartments = apartments.filter(apartmentosob__title_id=feature_id)

# —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–≤–∞—Ä—Ç–∏—Ä –ø–æ –¶–µ–Ω–µ, –ü–ª–æ—â–∞–¥–∏, –≠—Ç–∞–∂–∞–º
    search_form = ApartmentSearchForm(request.GET or None)

    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
        if search_form.is_valid():
            apartments = apartments.filter(
                price__gte=search_form.cleaned_data.get('min_price', 0),
                price__lte=search_form.cleaned_data.get('max_price', 1000000000),
                razmer__gte=search_form.cleaned_data.get('min_size', 0),
                razmer__lte=search_form.cleaned_data.get('max_size', 1000),
                floor__title__gte=search_form.cleaned_data.get('min_floor', 0),
                floor__title__lte=search_form.cleaned_data.get('max_floor', 11),
           
            )
            apartment_count = apartments.count()
            
            page = request.GET.get('page', 1)
            paginator = Paginator(apartments, 4)  # 4 –∫–≤–∞—Ä—Ç–∏—Ä—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É

            try:
                apartments = paginator.page(page)
            except PageNotAnInteger:
                apartments = paginator.page(1)
            except EmptyPage:
                apartments = paginator.page(paginator.num_pages)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã
            apartments_data = list(apartments.object_list.values(
                'id', 
                'category__title', 
                'info',
                'room__title', 
                'status__title', 
                'razmer', 
                'price',
                'layote',  
                'floor__title'
            ))
            

            for apt in apartments_data:
                apt['layote_url'] = apt['layote'] and getattr(models.Apartment.objects.get(pk=apt['id']).layote, 'url', '')
            print(f"Page: {page}, Showing apartments: {len(apartments_data)}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON-—Ñ–æ—Ä–º–∞—Ç–µ
            return JsonResponse({
                'results': apartments_data,
                'apartment_count': paginator.count,
                'has_next': apartments.has_next(),
                'has_previous': apartments.has_previous(),
                'next_page_number': apartments.next_page_number() if apartments.has_next() else None,
                'previous_page_number': apartments.previous_page_number() if apartments.has_previous() else None,
            }, safe=False)
        else:
            return JsonResponse({'error': search_form.errors}, status=400)

#–ø–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∞—Ä—Ç–∏—Ä    
    apartment_count = apartments.count()

# –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤
    contactinfo = ContactInfo.objects.latest('id')
    if request.method == "POST":
        if "call1" in request.POST:
            name = request.POST.get('name')
            email = request.POST.get('email')
            number = request.POST.get('number')
            consent = request.POST.get('consent') == 'on'  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —á–µ–∫–±–æ–∫—Å –±—ã–ª –æ—Ç–º–µ—á–µ–Ω
            if consent:
                contact = Contact.objects.create(name=name, email=email, number=number)
                send_mail(
                    f'{name}',
                    f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {name}, –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å, –ú—ã —Å–∫–æ—Ä–æ —Å–≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è. –í–∞—à–∞ –ø–æ—á—Ç–∞: {email}',
                    "noreply@somehost.local",
                    [email])
            if consent:
                get_text(f"""
                ‚úÖ–û—Å—Ç–∞–≤–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫
                         
‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è
                         
–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {name}
emai: {email}
–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {number}""")
                return redirect('index')
            
        if "call2" in request.POST:
            name = request.POST.get('name2')
            email = request.POST.get('email2')
            number = request.POST.get('number2')
            consent = request.POST.get('consent2') == 'on'  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —á–µ–∫–±–æ–∫—Å –±—ã–ª –æ—Ç–º–µ—á–µ–Ω
            if consent:
                contact = Contact.objects.create(name=name, email=email, number=number)
                send_mail(
                    f'{name}',
                    f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {name}, –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å, –ú—ã —Å–∫–æ—Ä–æ —Å–≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è. –í–∞—à–∞ –ø–æ—á—Ç–∞: {email}',
                    "noreply@somehost.local",
                    [email])
            if consent:
                get_text(f"""
                ‚úÖ–û—Å—Ç–∞–≤–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫ü§ó
                         
‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è
                         
–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {name}
emai: {email}
–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {number}""")
                return redirect('index')

    return render(request, 'catalog.html', locals())

def planing(request,id):
    #base
    settings = Settings.objects.latest("id")

    #apartment
    apartment = models.Apartment.objects.get(id=id)
    apartment_slide = models.Apartment.objects.all().order_by('?')[:5]
    min_price = int(0.3 * apartment.price)

#contacts
    contactinfo = ContactInfo.objects.latest('id')
    if request.method == "POST":
        if "call1" in request.POST:
            name = request.POST.get('name')
            email = request.POST.get('email')
            number = request.POST.get('number')
            consent = request.POST.get('consent') == 'on'  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —á–µ–∫–±–æ–∫—Å –±—ã–ª –æ—Ç–º–µ—á–µ–Ω
            if consent:
                contact = Contact.objects.create(name=name, email=email, number=number)
                send_mail(
                    f'{name}',
                    f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {name}, –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å, –ú—ã —Å–∫–æ—Ä–æ —Å–≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è. –í–∞—à–∞ –ø–æ—á—Ç–∞: {email}',
                    "noreply@somehost.local",
                    [email])
            if consent:
                get_text(f"""
                ‚úÖ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–∏–ª –∑–∞—è–≤–∫—É –Ω–∞  –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫
                         
‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è
                         
–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {name}
emai: {email}
–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {number}""")
                return redirect('index')
            
        if "call2" in request.POST:
            name = request.POST.get('name2')
            email = request.POST.get('email2')
            number = request.POST.get('number2')
            consent = request.POST.get('consent2') == 'on'  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —á–µ–∫–±–æ–∫—Å –±—ã–ª –æ—Ç–º–µ—á–µ–Ω
            if consent:
                contact = Contact.objects.create(name=name, email=email, number=number)
                send_mail(
                    f'{name}',
                    f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {name}, –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å, –ú—ã —Å–∫–æ—Ä–æ —Å–≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è. –í–∞—à–∞ –ø–æ—á—Ç–∞: {email}',
                    "noreply@somehost.local",
                    [email])
            if consent:
                get_text(f"""
                ‚úÖ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–∏–ª –∑–∞—è–≤–∫—É –Ω–∞  –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫
                         
‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è
                         
–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {name}
emai: {email}
–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {number}""")
                return redirect('index')
            
        if "quations" in request.POST:
            name = request.POST.get('name')
            email = request.POST.get('email')
            phone = request.POST.get('phone')
            message = request.POST.get('message')
            consent = request.POST.get('consent') == 'on'  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —á–µ–∫–±–æ–∫—Å –±—ã–ª –æ—Ç–º–µ—á–µ–Ω
            if consent:
                contact = Messages.objects.create(name=name, email=email, phone=phone,message=message)
                send_mail(
                    f'{name}',
                    f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {name}, –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å, –ú—ã —Å–∫–æ—Ä–æ —Å–≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è. –í–∞—à–∞ –ø–æ—á—Ç–∞: {email}. –í–∞—à –≤–æ–ø—Ä–æ—Å: {message}' ,
                    "noreply@somehost.local",
                    [email])
            if consent:
                get_text(f"""
                ‚úÖ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å
                         
‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è
                         
–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {name}
emai: {email}
–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}

–í–æ–ø—Ä–æ—Å: <b>{message}</b>""")
                return redirect('index')
            
        if "views" in request.POST:
            name = request.POST.get('name')
            email = request.POST.get('email')
            phone = request.POST.get('phone')
            message = request.POST.get('message')
            consent = request.POST.get('consent') == 'on'  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —á–µ–∫–±–æ–∫—Å –±—ã–ª –æ—Ç–º–µ—á–µ–Ω
            if consent:
                contact = Messages.objects.create(name=name, email=email, phone=phone,message=message)
                send_mail(
                    f'{name}',
                    f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {name}, –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å, –ú—ã —Å–∫–æ—Ä–æ —Å–≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è. –í–∞—à–∞ –ø–æ—á—Ç–∞: {email}. –í–∞—à –≤–æ–ø—Ä–æ—Å: {message}' ,
                    "noreply@somehost.local",
                    [email])
            if consent:
                get_text(f"""
                ‚úÖ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–∏–ª –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä
                         
‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è
                         
–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {name}
emai: {email}
–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}

–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π: <b>{message}</b>""")
                return redirect('index')


    return render(request, 'planing.html', locals())



def test(request):
    apartments = models.Apartment.objects.all()
    return render(request, 'test.html', locals())
